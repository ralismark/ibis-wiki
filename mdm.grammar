// https://lezer.codemirror.net/docs/guide/

@precedence { high, low }

@top Document {
	(
		Codeblock { modeline ("\n" any*)* }
	) | (
		Preamble?
		(line? "\n")* line?
	)
}

Preamble {
	!high Hr "\n" (blockany* "\n")* Hr "\n"
}

line {
	Header { ATXMeta any* }
	| Blockquote { BlockquoteMeta content }
	| Codeblock { CodeblockFence (blockany* "\n")+ CodeblockFence }
	| !low Hr
	| content
}

content {
	(!low special | any)* !high
}

special {
	Ref { RefOpen RefIdent? RefClose }
	| CodeSpan { CodeSpanMeta any* CodeSpanMeta }
	| Star inS1
	| Starstar inS2
	| Ang { AngOpen AngIdent { any* } AngClose }
}

inS1 {
	S1 { content } (Star | Starstar inS3)
}

inS2 {
	S2 { content } (Starstar | Star inS3)
}

inS3 {
	S3 { content } (Star inS2 | Starstar inS1)
}

@tokens {

	// Block-level things

	ATXMeta { "#"+ }
	BlockquoteMeta { ">" }
	Hr { "---" }
	CodeblockFence { "```" }
	modeline { ![\n]* "vim: ft=" ![\n]* }
	blockany { ![\n] }
	
	@precedence { modeline, ATXMeta, Hr, BlockquoteMeta, CodeblockFence, blockany, any }

	// Span-level things

	CodeSpanMeta[openedBy="CodeSpanMeta", closedBy="CodeSpanMeta"] { "`" }

	Star[openedBy="Star", closedBy="Star"] { "*" }
	Starstar[openedBy="Starstar", closedBy="Starstar"] { "**" }

	AngOpen[closedBy="AngClose"] { "<" }
	AngClose[openedBy="AngOpen"] { ">" }

	RefIdent { $[A-Za-z0-9_ ,-.]+ }
	RefOpen[closedBy="RefClose"] { "[[" }
	RefClose[openedBy="RefOpen"] { "]]" }

	any { ![\n] }

	@precedence { modeline, CodeSpanMeta, Starstar, Star, AngOpen, AngClose, RefOpen, RefClose, any }

}
